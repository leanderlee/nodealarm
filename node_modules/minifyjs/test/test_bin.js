var cp = require('child_process'),
    path = require('path'),
    assert = require('assert'),
    helper = require(path.join(__dirname, 'helper')),
    valid = path.join(__dirname, 'data', 'valid.js'),
    broke = path.join(__dirname, 'data', 'broke.js'),
    bin = path.join(__dirname, '../', 'bin', 'minify');

function run_bin (args, cb) {
    console.log('Running: %s', args.join(' '));
    p = cp.spawn(args.join(' '));
    var stdout = "", stderr = "";
    p.stdout.on('data', function (chunk) {
        console.log("Got stdout: %s", chunk.toString());
        stdout += chunk.toString();
    });
    p.stderr.on('data', function (chunk) {
        console.log("Got stderr: %s", chunk.toString());
        stderr += chunk.toString();
    });
    p.on('exit', function (code) {
        console.log("Exit code %s.", code);
        if (code) {
            return cb(stderr, null, args);
        }
        return cb(null, stdout, args);
    });
}

function expectValid (err, data, args) {
    assert.ok(!err, 'Got an error on ' + args.join(' '));
    assert.ok(data);
    assert.equal(typeof data, 'string');
    fulfill();
}

function expectInvalid (err, data, args) {
    assert.ok(err, 'Expected an error and got ' + err + ' on ' + args.join(' ')+"\n\nData: " + data);
    fulfill();
}

expect(14);
//run_bin([bin, valid], expectValid);
/*run_bin([bin, '-m', valid], expectValid);
run_bin([bin, '--engine uglify', valid], expectValid);
run_bin([bin, '--engine uglify', '--level 1', valid], expectValid);
run_bin([bin, '--engine uglify', '--level 2', valid], expectValid);
run_bin([bin, '--engine best', valid], expectValid);
run_bin([bin, '--engine best', '--level 1', valid], expectValid);
run_bin([bin, '--engine best', '--level 2', valid], expectValid);
run_bin([bin, '--engine gcc', valid], expectValid);
run_bin([bin, '--engine gcc', '--level 1', valid], expectValid);
run_bin([bin, '--engine gcc', '--level 2', valid], expectValid);
run_bin([bin, '--engine yui', valid], expectValid);
run_bin([bin, '--engine yui', '--level 1', valid], expectValid);
run_bin([bin, '--engine yui', '--level 2', valid], expectValid);


expect(14);
run_bin([bin, broke], expectInvalid);
run_bin([bin, '-m', broke], expectInvalid);
run_bin([bin, '--engine uglify', broke], expectInvalid);
run_bin([bin, '--engine uglify', '--level 1', broke], expectInvalid);
run_bin([bin, '--engine uglify', '--level 2', broke], expectInvalid);
run_bin([bin, '--engine best', broke], expectInvalid);
run_bin([bin, '--engine best', '--level 1', broke], expectInvalid);
run_bin([bin, '--engine best', '--level 2', broke], expectInvalid);
run_bin([bin, '--engine gcc', broke], expectInvalid);
run_bin([bin, '--engine gcc', '--level 1', broke], expectInvalid);
run_bin([bin, '--engine gcc', '--level 2', broke], expectInvalid);
run_bin([bin, '--engine yui', broke], expectInvalid);
*/
run_bin([bin, '--engine yui', '--level 1', broke], expectInvalid);
/*run_bin([bin, '--engine yui', '--level 2', broke], expectInvalid);*/
